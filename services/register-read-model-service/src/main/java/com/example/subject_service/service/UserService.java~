package com.example.demo.service;

import com.example.demo.model.Course;
import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    private final UserRepository userRepository;

    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public Optional<User> getUserById(String id) {
        return userRepository.findById(id);
    }

    public Optional<User> getUserByUsername(String username) {
        return userRepository.findByUsername(username);
    }

    public User createUser(User user) {
        if (user.getRegisteredCourses() == null) {
            user.setRegisteredCourses(new ArrayList<>());
        }
        return userRepository.save(user);
    }

    public Optional<User> updateUser(String id, User userDetails) {
        return userRepository.findById(id)
                .map(existingUser -> {
                    existingUser.setUsername(userDetails.getUsername());
                    existingUser.setEmail(userDetails.getEmail());
                    existingUser.setFullName(userDetails.getFullName());
                    return userRepository.save(existingUser);
                });
    }

    public Optional<User> registerCourse(String userId, Course course) {
        return userRepository.findById(userId)
                .map(user -> {
                    if (user.getRegisteredCourses() == null) {
                        user.setRegisteredCourses(new ArrayList<>());
                    }
                    user.getRegisteredCourses().add(course);
                    return userRepository.save(user);
                });
    }

    public Optional<User> unregisterCourse(String userId, String courseId) {
        return userRepository.findById(userId)
                .map(user -> {
                    if (user.getRegisteredCourses() != null) {
                        user.getRegisteredCourses().removeIf(course -> course.getCourseId().equals(courseId));
                    }
                    return userRepository.save(user);
                });
    }

    public void deleteUser(String id) {
        userRepository.deleteById(id);
    }
}