package com.example.register_subject_service.service;

import com.example.register_subject_service.model.RegisterResponse;
import com.example.register_subject_service.model.RegisterSubjectDto;
import com.example.register_subject_service.model.Schedule;
import com.example.register_subject_service.util.ServiceAPI;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;


@Service
public class RegisterSubjectService {

    @Value("${app.global.schedule-service-url}")
    private String scheduleURL;

    private final ServiceAPI serviceAPI;

    public RegisterSubjectService(ServiceAPI serviceAPI) {
        this.serviceAPI = serviceAPI;
    }


    public List<RegisterResponse> registerSubject(HttpServletRequest request, @RequestBody RegisterSubjectDto form) {

        List<RegisterResponse> messages = new ArrayList<>();

        messages.addAll(this.validateConflictSchedule(request, form));
        messages.addAll(this.validateEnoughCredit(request, form));
        messages.addAll(this.validateEnoughSlot(request, form));

        //fail
        if (!messages.isEmpty()) return messages;

        //success
        messages.add(RegisterResponse.builder()
                .success(true)
                .status(200L)
                .message("Success")
                .build());

        return messages;
    }

    public void save(HttpServletRequest request, @RequestBody RegisterSubjectDto form) {
        // TODO:emit event
    }

    public ArrayList<RegisterResponse> validateConflictSchedule(HttpServletRequest request, @RequestBody RegisterSubjectDto form) {
        ArrayList<RegisterResponse> messages = new ArrayList<>();
        ObjectMapper mapper = new ObjectMapper();
        // get schedule list
        ArrayList<ArrayList<Schedule>> courseSchedules = new ArrayList<>();

        for (int i = 0; i < form.getCourseIds().size(); i++) {
            Long courseId = form.getCourseIds().get(i);
            ArrayList<Schedule> schedules = (ArrayList<Schedule>) this.serviceAPI.callForList(
                    this.scheduleURL + "/schedule?courseId=" + courseId,
                    HttpMethod.GET,
                    null,
                    Schedule.class,
                    (String) request.getAttribute("token")
            );

            courseSchedules.add(schedules);
        }
        
        messages.add(RegisterResponse.builder()
                .success(true)
                .status(200L)
                .message("Success")
                .build());

        return messages;
    }

    public ArrayList<RegisterResponse> validateEnoughCredit(HttpServletRequest request, @RequestBody RegisterSubjectDto form) {
        ArrayList<RegisterResponse> messages = new ArrayList<>();

        messages.add(RegisterResponse.builder()
                .success(true)
                .status(200L)
                .message("Success")
                .build());

        return messages;
    }

    public ArrayList<RegisterResponse> validateEnoughSlot(HttpServletRequest request, @RequestBody RegisterSubjectDto form) {
        ArrayList<RegisterResponse> messages = new ArrayList<>();

        messages.add(RegisterResponse.builder()
                .success(true)
                .status(200L)
                .message("Success")
                .build());

        return messages;
    }
}